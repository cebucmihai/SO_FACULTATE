#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <time.h>
#include <dirent.h>

// #pragma pack(1) este folosit pentru alinierea corespunzatoare a byte-tilor pentru a putea fi extrasi in structurile declarate mai jos
#pragma pack(1)
typedef struct {
  char signature[2];
  int size;
  int reserved;
  int offset;
} BMPHeader;
#pragma pack()
typedef struct {
    int headerSize;
    int width;
    int height;
    short planes;
    short bitsPerPixel;
    int compression;
    int imageSize;
    int xPixelsPerM;
    int yPixelsPerM;
    int colorsUsed;
    int colorsImportant;
} BMPInfoHeader;

char permUSR[4];
char permGRP[4];
char permOTH[4];
//Functie folosita pentru a vedea permisiunile asupra fisierului a user-ului, grupului si a celorlalti useri
void getPermissions(mode_t mode) {
    snprintf(permUSR, 4, "%c%c%c",
             (mode & S_IRUSR) ? 'R' : '-',
             (mode & S_IWUSR) ? 'W' : '-',
             (mode & S_IXUSR) ? 'X' : '-');
    snprintf(permGRP,4, "%c%c%c",
             (mode & S_IRGRP) ? 'R' : '-',
             (mode & S_IWGRP) ? 'W' : '-',
             (mode & S_IXGRP) ? 'X' : '-');
    snprintf(permOTH,4, "%c%c%c",
             (mode & S_IROTH) ? 'R' : '-',
             (mode & S_IWOTH) ? 'W' : '-',
             (mode & S_IXOTH) ? 'X' : '-');
}
//Aceasta functie verifica daca fisierul respectiv este de tip .BMP si afiseaza datele cerute in problema aferenta saptamanii 6
void processBMP(const char *fileName, int outputFd) {
    int inputFd = open(fileName, O_RDONLY);
    if (inputFd == -1) {
        perror("Eroare la deschiderea fisierului BMP");
        return;
    }

    BMPHeader bmpHeader;
    if (read(inputFd, &bmpHeader, sizeof(BMPHeader)) != sizeof(BMPHeader)) {
        perror("Eroare la citirea header-ului BMP");
        close(inputFd);
        return;
    }

    if (bmpHeader.signature[0] != 'B' || bmpHeader.signature[1] != 'M') {
        fprintf(stderr, "Fisierul %s nu este de tip BMP\n", fileName);
        close(inputFd);
        return;
    }

    BMPInfoHeader bmpInfoHeader;
    if (read(inputFd, &bmpInfoHeader, sizeof(BMPInfoHeader)) != sizeof(BMPInfoHeader)) {
        perror("Eroare la citirea informatiilor din header-ul BMP");
        close(inputFd);
        return;
    }

    struct stat fileInfo;
    if (fstat(inputFd, &fileInfo) == -1) {
        perror("Eroare la obtinerea informatiilor despre fisierul de intrare");
        close(inputFd);
        return;
    }

    char modificationTime[20];
    struct tm *timeinfo = localtime(&fileInfo.st_mtime);
    strftime(modificationTime, sizeof(modificationTime), "%d.%m.%Y", timeinfo);

    char outputBuffer[512];
    getPermissions(fileInfo.st_mode);
    snprintf(outputBuffer, sizeof(outputBuffer),
             "nume fisier: %s\n"
             "inaltime: %d\n"
             "lungime: %d\n"
             "dimensiune: %lu\n"
             "identificatorul utilizatorului: %d\n"
             "timpul ultimei modificari: %s\n"
             "contorul de legaturi: %lu\n"
             "drepturi de acces user: %s\n"
             "drepturi de acces grup: %s\n"
             "drepturi de acces altii: %s\n\n",
             fileName, bmpInfoHeader.height, bmpInfoHeader.width, fileInfo.st_size, fileInfo.st_uid, modificationTime,
             fileInfo.st_nlink, permUSR, permGRP, permOTH);

    if (write(outputFd, outputBuffer, strlen(outputBuffer)) == -1) {
        perror("Eroare la scrierea in fisierul de iesire");
    }

    close(inputFd);
}
//Functie folosita pentru a obtine informatii despre celelalte tipuri de fisiere diferite de BMP
void processOtherFile(const char *fileName, int outputFd) {
    struct stat fileInfo;
    if (stat(fileName, &fileInfo) == -1) {
        perror("Eroare la obtinerea informatiilor despre fisierul");
        return;
    }

    char outputBuffer[512];
    getPermissions(fileInfo.st_mode);
    snprintf(outputBuffer, sizeof(outputBuffer),
             "nume fisier: %s\n"
             "dimensiune: %lu\n"
             "identificatorul utilizatorului: %d\n"
             "contorul de legaturi: %lu\n"
             "drepturi de acces user: %s\n"
             "drepturi de acces grup: %s\n"
             "drepturi de acces altii: %s\n\n",
             fileName, fileInfo.st_size, fileInfo.st_uid,
             fileInfo.st_nlink, permUSR, permGRP, permOTH);

    if (write(outputFd, outputBuffer, strlen(outputBuffer)) == -1) {
        perror("Eroare la scrierea in fisierul de iesire");
    }
}

//Functie folosita pentru a obtine informatii despre fisierele de tip director
void processDirectory(const char *dirName, int outputFd) {
    struct stat dirInfo;
    if (lstat(dirName, &dirInfo) == -1) {
        perror("Eroare la obtinerea informatiilor despre directorul de intrare");
        return;
    }

    char outputBuffer[512];
    getPermissions(dirInfo.st_mode);
    snprintf(outputBuffer, sizeof(outputBuffer),
             "nume director: %s\n"
             "identificatorul utilizatorului: %d\n"
             "drepturi de acces user: %s\n"
             "drepturi de acces grup: %s\n"
             "drepturi de acces altii: %s\n\n",
             dirName, dirInfo.st_uid, permUSR, permGRP, permOTH);

    if (write(outputFd, outputBuffer, strlen(outputBuffer)) == -1) {
        perror("Eroare la scrierea in fisierul de iesire");
    }
}

//Functie folosita pentru a obtine informatii despre link-urile simbolice
void processSymbolicLink(const char *linkName, int outputFd) {
    struct stat linkInfo;
    if (lstat(linkName, &linkInfo) == -1) {
        perror("Eroare la obtinerea informatiilor despre legatura simbolica");
        return;
    }

    struct stat targetInfo;
    if (stat(linkName, &targetInfo) == -1) {
        perror("Eroare la obtinerea informatiilor despre fisierul target al legaturii simbolice");
        return;
    }

    char outputBuffer[512];
    getPermissions(linkInfo.st_mode);
    snprintf(outputBuffer, sizeof(outputBuffer),
             "nume legatura: %s\n"
             "dimensiune: %lu\n"
             "dimensiune fisier: %lu\n"
             "drepturi de acces user: %s\n"
             "drepturi de acces grup: %s\n"
             "drepturi de acces altii: %s\n\n",
             linkName, linkInfo.st_size, targetInfo.st_size, permUSR, permGRP, permOTH);

    if (write(outputFd, outputBuffer, strlen(outputBuffer)) == -1) {
        perror("Eroare la scrierea in fisierul de iesire");
    }
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <director_intrare>\n", argv[0]);
        return 1;
    }

    const char *inputDirName = argv[1];
    char outputFileName[] = "statistica.txt";

    int outputFd = open(outputFileName, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
    if (outputFd == -1) {
        perror("Eroare la deschiderea fisierului de iesire");
        return 1;
    }

    DIR *dir;
    struct dirent *entry;
    dir = opendir(inputDirName);

    if (dir == NULL) {
        perror("Eroare la deschiderea directorului de intrare");
        return 1;
    }

    while ((entry = readdir(dir)) != NULL) {
        if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0) {
            continue; 
        }
	char entryPath[PATH_MAX];
        snprintf(entryPath, PATH_MAX, "%s/%s", inputDirName, entry->d_name);
        if (entry->d_type == DT_REG) {
            if (strstr(entryPath, ".bmp") != NULL) {
                processBMP(fileName, outputFd);
            } else {
                processOtherFile(entryPath, outputFd);
            }
        } else if (entry->d_type == DT_DIR) {
            processDirectory(entryPath, outputFd);
        } else if (entry->d_type == DT_LNK) {
            processSymbolicLink(entryPath, outputFd);
        }
    }

    closedir(dir);
    close(outputFd);

    return 0;
}
